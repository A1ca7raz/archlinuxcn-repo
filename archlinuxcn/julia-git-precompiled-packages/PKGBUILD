# Maintainer: Yichao Yu <yyc1992@gmail.com>

pkgbase=julia-git-precompiled-packages
_jlpackages=(
###=== JLPKG_JLNAME_LIST {{
  ASL_jll
  AbstractTrees
  Adapt
  ArrayInterface
  BenchmarkTools
  Blosc
  Blosc_jll
  BufferedStreams
  Bzip2_jll
  CEnum
  ChainRulesCore
  ChangesOfVariables
  CodeTracking
  CodecBzip2
  CodecLz4
  CodecZlib
  CodecZstd
  ColorTypes
  Colors
  CommonSubexpressions
  Compat
  Conda
  Crayons
  Cthulhu
  DataAPI
  DataFrames
  DataStructures
  DataValueInterfaces
  DiffResults
  DiffRules
  DocStringExtensions
  FileIO
  FilePathsBase
  FixedPointNumbers
  FlameGraphs
  FoldingTrees
  ForwardDiff
  GSL
  GSL_jll
  H5Zbitshuffle
  H5Zblosc
  H5Zbzip2
  H5Zlz4
  H5Zzstd
  HDF5
  HDF5_jll
  Hwloc_jll
  IJulia
  IndirectArrays
  InlineStrings
  InverseFunctions
  InvertedIndices
  Ipopt
  Ipopt_jll
  IrrationalConstants
  IteratorInterfaceExtensions
  JET
  JSON
  JuMP
  JuliaInterpreter
  JuliaSyntax
  LLVMOpenMP_jll
  LaTeXStrings
  LeftChildRightSiblingTrees
  Libiconv_jll
  LogExpFunctions
  LoweredCodeUtils
  Lz4_jll
  MAT
  METIS_jll
  MPI
  MPICH_jll
  MPIPreferences
  MPItrampoline_jll
  MUMPS_seq_jll
  MacroTools
  MathOptInterface
  MbedTLS
  MicrosoftMPI_jll
  Missings
  MutableArithmetics
  NLopt
  NLopt_jll
  NaNMath
  OpenBLAS32_jll
  OpenMPI_jll
  OpenSSL_jll
  OpenSpecFun_jll
  OrderedCollections
  Parsers
  PkgVersion
  PooledArrays
  PrecompileTools
  Preferences
  PrettyTables
  PyCall
  PyPlot
  Reexport
  Requires
  Revise
  SPRAL_jll
  SentinelArrays
  SnoopCompile
  SnoopCompileCore
  SnoopPrecompile
  SoftGlobalScope
  SortingAlgorithms
  SpecialFunctions
  StaticArrays
  StaticArraysCore
  StringEncodings
  StringManipulation
  TableTraits
  Tables
  TranscodingStreams
  TypedSyntax
  VersionParsing
  WidthLimitedIO
  YAML
  ZMQ
  ZeroMQ_jll
  Zstd_jll
  bitshuffle_jll
  libaec_jll
  libsodium_jll
###=== }} JLPKG_JLNAME_LIST
)
pkgname=()
makedepends=(git julia-git-package-env)
pkgver=20231002.061525
pkgrel=1
pkgdesc="Precompiled packages for julia-git"
arch=('i686' 'x86_64' 'armv7h' 'aarch64')
url="http://julialang.org"
license=('GPL')
depends=(julia-git)
options=('debug' '!strip')
source=()
sha512sums=()

pkgver() {
  date -u +%Y%m%d.%H%M%S
}

_package-jlpackage() {
  # Don't depend on the exact julia version to make it easier to install
  # a new julia version that without updating all the precompiled packages
  # In such a case the precompiled binaries won't be used but the packages
  # should still work.
  # depends+=("julia-git=$(pacman -Q julia-git | sed -e 's/^.* \([^ ]*\)$/\1/')")

  jlpkg=$1
  srcpkg="julia-git-${jlpkg,,}-src"

  depends+=("$srcpkg")
  conflicts+=("julia-git-${jlpkg,,}-git") # Temporary

  ver_short=$(julia --startup-file=no \
                    -e 'print(VERSION.major, ".", VERSION.minor)')
  compile_dir="/usr/share/julia/compiled/v$ver_short"
  stdlib_dir="/usr/share/julia/stdlib/v$ver_short"
  mkdir -p "${pkgdir}/${compile_dir}"

  _jlpkgs=($jlpkg)

  for p in "$stdlib_dir/$jlpkg/Project.toml" "$stdlib_dir/$jlpkg/JuliaProject.toml"; do
    if [[ -f "$p" ]]; then
      _jlpkgs=("${_jlpkgs[@]}"
               $(julia -e 'd = get(Base.parsed_toml(ARGS[1]), "extensions", nothing); if d !== nothing; println(join(keys(d), " ")) end' "$p"))
      break
    fi
  done

  for _jlpkg in "${_jlpkgs[@]}"; do
    if [[ -d "${compile_dir}/${_jlpkg}" ]]; then
      # This is a bit cheating as we are simply copying the version
      # from the package hook
      cp -a "${compile_dir}/${_jlpkg}" "${pkgdir}/${compile_dir}"
      touch "${pkgdir}/${compile_dir}/${_jlpkg}/.archpkg"
    fi
  done
}

for jlpkg in "${_jlpackages[@]}"; do
  _pkg="julia-git-${jlpkg,,}"
  pkgname=("${pkgname[@]}" "${_pkg}")
  makedepends=("${makedepends[@]}" "${_pkg}-src")
  eval "package_${_pkg}() { _package-jlpackage ${jlpkg}; }"
done
