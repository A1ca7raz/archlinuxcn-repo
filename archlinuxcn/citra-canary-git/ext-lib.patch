diff --color -rupN citra/CMakeLists.txt citra/CMakeLists.txt
--- citra/CMakeLists.txt	2023-01-20 00:44:13.675597719 +0800
+++ citra/CMakeLists.txt	2023-01-20 00:41:12.801915797 +0800
@@ -12,6 +12,7 @@ set(CMAKE_POLICY_DEFAULT_CMP0063 NEW)
 
 list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/CMakeModules")
 list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/externals/cmake-modules")
+list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/externals/find-modules")
 include(DownloadExternals)
 include(CMakeDependentOption)
 
@@ -87,6 +88,10 @@ if (CITRA_USE_PRECOMPILED_HEADERS)
     set(CMAKE_PCH_INSTANTIATE_TEMPLATES ON)
 endif()
 
+option(CITRA_CHECK_SUBMODULES "Check if submodules are present" ON)
+
+CMAKE_DEPENDENT_OPTION(CITRA_USE_FASTER_LD "Check if a faster linker is available" ON "NOT WIN32" OFF)
+
 if(NOT EXISTS ${PROJECT_SOURCE_DIR}/.git/hooks/pre-commit)
     message(STATUS "Copying pre-commit hook")
     file(COPY hooks/pre-commit
@@ -131,7 +138,7 @@ function(check_submodules_present)
         endif()
     endforeach()
 endfunction()
-if (EXISTS "${PROJECT_SOURCE_DIR}/.git/objects")
+if (EXISTS "${PROJECT_SOURCE_DIR}/.git/objects" AND CITRA_CHECK_SUBMODULES)
     # only check submodules when source is obtained via Git
     check_submodules_present()
 endif()
@@ -231,6 +236,17 @@ set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PRO
 set(THREADS_PREFER_PTHREAD_FLAG ON)
 find_package(Threads REQUIRED)
 
+find_package(PkgConfig REQUIRED)
+find_package(tsl-robin-map)
+
+if (USE_DISCORD_PRESENCE)
+    find_package(DiscordRPC)
+endif()
+
+if (ENABLE_TESTS)
+    find_package(Catch2 2)
+endif()
+
 if (ENABLE_QT)
     if (NOT USE_SYSTEM_QT)
         download_qt(6.6.0)
@@ -375,6 +412,21 @@ if (NOT USE_SYSTEM_BOOST)
     add_definitions( -DBOOST_ALL_NO_LIB )
 endif()
 
+if (CITRA_USE_FASTER_LD AND CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
+    # We will assume that if the compiler is GCC, it will attempt to use ld.bfd by default.
+    # Try to pick a faster linker.
+    find_program(LLD lld)
+    find_program(MOLD mold)
+
+    if (MOLD AND CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL "12.1")
+        message(NOTICE "Selecting mold as linker")
+        add_link_options("-fuse-ld=mold")
+    elseif (LLD)
+        message(NOTICE "Selecting lld as linker")
+        add_link_options("-fuse-ld=lld")
+    endif()
+endif()
+
 enable_testing()
 add_subdirectory(externals)
 
diff --color -rupN citra/externals/CMakeLists.txt citra/externals/CMakeLists.txt
--- citra/externals/CMakeLists.txt	2023-01-20 00:44:13.712264461 +0800
+++ citra/externals/CMakeLists.txt	2023-01-20 04:34:47.512808459 +0800
@@ -41,15 +41,20 @@ else()
 endif()
 
 # Catch2
-set(CATCH_INSTALL_DOCS OFF CACHE BOOL "")
-set(CATCH_INSTALL_EXTRAS OFF CACHE BOOL "")
-add_subdirectory(catch2)
+if (ENABLE_TESTS AND NOT TARGET Catch2::Catch2)
+    message(STATUS "Using bundled catch2")
+    set(CATCH_INSTALL_DOCS OFF CACHE BOOL "")
+    set(CATCH_INSTALL_EXTRAS OFF CACHE BOOL "")
+    set(CATCH_BUILD_STATIC_LIBRARY ON)
+    add_subdirectory(catch2 EXCLUDE_FROM_ALL)
+endif()
 
 # Crypto++
 if(USE_SYSTEM_CRYPTOPP)
-    find_package(cryptopp REQUIRED)
+    find_package(PkgConfig REQUIRED)
+    pkg_check_modules(Crypto++ IMPORTED_TARGET libcryptopp)
     add_library(cryptopp INTERFACE)
-    target_link_libraries(cryptopp INTERFACE cryptopp::cryptopp)
+    target_link_libraries(cryptopp INTERFACE PkgConfig::Crypto++)
 else()
     set(CRYPTOPP_BUILD_DOCUMENTATION OFF CACHE BOOL "")
     set(CRYPTOPP_BUILD_TESTING OFF CACHE BOOL "")
@@ -162,7 +167,14 @@ endif()
 add_subdirectory(open_source_archives)
 
 # faad2
-add_subdirectory(faad2 EXCLUDE_FROM_ALL)
+if(USE_SYSTEM_FAAD2)
+    find_package(PkgConfig REQUIRED)
+    pkg_check_modules(FAAD2 IMPORTED_TARGET faad2)
+    add_library(faad2 INTERFACE)
+    target_link_libraries(faad2 INTERFACE PkgConfig::FAAD2)
+else()
+    add_subdirectory(faad2 EXCLUDE_FROM_ALL)
+endif()
 
 # Dynamic library headers
 add_library(library-headers INTERFACE)
@@ -254,7 +266,7 @@ if (ENABLE_CUBEB)
 endif()
 
 # DiscordRPC
-if (USE_DISCORD_PRESENCE)
+if (USE_DISCORD_PRESENCE AND NOT TARGET DiscordRPC::discord-rpc)
     add_subdirectory(discord-rpc EXCLUDE_FROM_ALL)
     target_include_directories(discord-rpc INTERFACE ./discord-rpc/include)
 endif()
diff --color -rupN citra/externals/cmake-modules/CitraHandleSystemLibs.cmake citra/externals/cmake-modules/CitraHandleSystemLibs.cmake
--- citra/externals/cmake-modules/CitraHandleSystemLibs.cmake	2023-01-20 00:44:13.712264461 +0800
+++ citra/externals/cmake-modules/CitraHandleSystemLibs.cmake	2023-01-20 04:34:47.512808459 +0800
@@ -25,6 +25,7 @@ option(USE_SYSTEM_LODEPNG "Use the syste
 option(USE_SYSTEM_OPENAL "Use the system OpenAL (instead of the bundled one)" OFF)
 option(USE_SYSTEM_VMA "Use the system VulkanMemoryAllocator (instead of the bundled one)" OFF)
 option(USE_SYSTEM_VULKAN_HEADERS "Use the system Vulkan headers (instead of the bundled ones)" OFF)
+option(USE_SYSTEM_FAAD2 "Use the system faad2 (instead of the bundled one)" OFF)
 
 # Qt and MoltenVK are handled separately
 CMAKE_DEPENDENT_OPTION(DISABLE_SYSTEM_SDL2 "Disable system SDL2" OFF "USE_SYSTEM_LIBS" OFF)
@@ -49,6 +50,7 @@ CMAKE_DEPENDENT_OPTION(DISABLE_SYSTEM_LO
 CMAKE_DEPENDENT_OPTION(DISABLE_SYSTEM_OPENAL "Disable system OpenAL" OFF "USE_SYSTEM_LIBS" OFF)
 CMAKE_DEPENDENT_OPTION(DISABLE_SYSTEM_VMA "Disable system VulkanMemoryAllocator" OFF "USE_SYSTEM_LIBS" OFF)
 CMAKE_DEPENDENT_OPTION(DISABLE_SYSTEM_VULKAN_HEADERS "Disable system Vulkan headers" OFF "USE_SYSTEM_LIBS" OFF)
+CMAKE_DEPENDENT_OPTION(DISABLE_SYSTEM_FAAD2 "Disable system faad2" OFF "USE_SYSTEM_LIBS" OFF)
 
 set(LIB_VAR_LIST
     SDL2
@@ -73,6 +75,7 @@ set(LIB_VAR_LIST
     OPENAL
     VMA
     VULKAN_HEADERS
+    FAAD2
     )
 
 # First, check that USE_SYSTEM_XXX is not used with USE_SYSTEM_LIBS
diff --color -rupN citra/externals/find-modules/FindDiscordRPC.cmake citra/externals/find-modules/FindDiscordRPC.cmake
--- citra/externals/find-modules/FindDiscordRPC.cmake	1970-01-01 08:00:00.000000000 +0800
+++ citra/externals/find-modules/FindDiscordRPC.cmake	2023-01-20 00:41:12.715249024 +0800
@@ -0,0 +1,27 @@
+# SPDX-FileCopyrightText: 2022 Alexandre Bouvier <contact@amb.tf>
+#
+# SPDX-License-Identifier: GPL-3.0-or-later
+
+find_path(DiscordRPC_INCLUDE_DIR discord_rpc.h)
+
+find_library(DiscordRPC_LIBRARY discord-rpc)
+
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(DiscordRPC
+    REQUIRED_VARS
+        DiscordRPC_LIBRARY
+        DiscordRPC_INCLUDE_DIR
+)
+
+if (DiscordRPC_FOUND AND NOT TARGET DiscordRPC::discord-rpc)
+    add_library(DiscordRPC::discord-rpc UNKNOWN IMPORTED)
+    set_target_properties(DiscordRPC::discord-rpc PROPERTIES
+        IMPORTED_LOCATION "${DiscordRPC_LIBRARY}"
+        INTERFACE_INCLUDE_DIRECTORIES "${DiscordRPC_INCLUDE_DIR}"
+    )
+endif()
+
+mark_as_advanced(
+    DiscordRPC_INCLUDE_DIR
+    DiscordRPC_LIBRARY
+)
\ No newline at end of file
diff --color -rupN citra/src/citra_qt/CMakeLists.txt citra/src/citra_qt/CMakeLists.txt
--- citra/src/citra_qt/CMakeLists.txt	2023-01-20 00:44:13.805597987 +0800
+++ citra/src/citra_qt/CMakeLists.txt	2023-01-20 00:41:12.755249073 +0800
@@ -297,7 +297,7 @@ if (USE_DISCORD_PRESENCE)
         discord_impl.cpp
         discord_impl.h
     )
-    target_link_libraries(citra-qt PRIVATE discord-rpc)
+    target_link_libraries(citra-qt PRIVATE DiscordRPC::discord-rpc)
     target_compile_definitions(citra-qt PRIVATE -DUSE_DISCORD_PRESENCE)
 endif()
 
