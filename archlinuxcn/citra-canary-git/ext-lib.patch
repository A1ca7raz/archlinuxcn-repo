diff --color -rupN citra/CMakeLists.txt citra/CMakeLists.txt
--- citra/CMakeLists.txt	2023-01-20 00:44:13.675597719 +0800
+++ citra/CMakeLists.txt	2023-01-20 00:41:12.801915797 +0800
@@ -12,6 +12,7 @@ set(CMAKE_POLICY_DEFAULT_CMP0063 NEW)
 
 list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/CMakeModules")
 list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/externals/cmake-modules")
+list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/externals/find-modules")
 include(DownloadExternals)
 include(CMakeDependentOption)
 
@@ -87,6 +88,10 @@ if (CITRA_USE_PRECOMPILED_HEADERS)
     set(CMAKE_PCH_INSTANTIATE_TEMPLATES ON)
 endif()
 
+option(CITRA_CHECK_SUBMODULES "Check if submodules are present" ON)
+
+CMAKE_DEPENDENT_OPTION(CITRA_USE_FASTER_LD "Check if a faster linker is available" ON "NOT WIN32" OFF)
+
 if(NOT EXISTS ${PROJECT_SOURCE_DIR}/.git/hooks/pre-commit)
     message(STATUS "Copying pre-commit hook")
     file(COPY hooks/pre-commit
@@ -131,7 +138,7 @@ function(check_submodules_present)
         endif()
     endforeach()
 endfunction()
-if (EXISTS "${PROJECT_SOURCE_DIR}/.git/objects")
+if (EXISTS "${PROJECT_SOURCE_DIR}/.git/objects" AND CITRA_CHECK_SUBMODULES)
     # only check submodules when source is obtained via Git
     check_submodules_present()
 endif()
@@ -217,6 +224,44 @@ set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PRO
 set(THREADS_PREFER_PTHREAD_FLAG ON)
 find_package(Threads REQUIRED)
 
+find_package(enet 1.3)
+find_package(fmt 8.1.1 CONFIG)
+find_package(inih)
+find_package(PkgConfig REQUIRED)
+pkg_check_modules(Crypto++ REQUIRED IMPORTED_TARGET libcryptopp)
+find_package(zstd 1.4)
+find_package(nlohmann_json)
+find_package(tsl-robin-map)
+find_package(glslang)
+find_package(VulkanMemoryAllocator)
+find_package(libusb)
+
+if (ARCHITECTURE_x86 OR ARCHITECTURE_x86_64)
+    find_package(xbyak 6)
+    find_package(dynarmic 6.4.0)
+endif()
+
+if (ENABLE_CUBEB)
+    find_package(cubeb)
+endif()
+
+if (USE_DISCORD_PRESENCE)
+    find_package(DiscordRPC)
+endif()
+
+if (ENABLE_WEB_SERVICE)
+    find_package(cpp-jwt 1.4)
+    find_package(httplib)
+endif()
+
+if (ENABLE_TESTS)
+    find_package(Catch2 2)
+endif()
+
+if(ENABLE_OPENAL)
+    find_package(OpenAL 1.23.0)
+endif()
+
 if (ENABLE_QT)
     if (NOT USE_SYSTEM_QT)
         download_qt(6.5.0)
@@ -359,6 +401,21 @@ if (NOT USE_SYSTEM_BOOST)
     add_definitions( -DBOOST_ALL_NO_LIB )
 endif()
 
+if (CITRA_USE_FASTER_LD AND CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
+    # We will assume that if the compiler is GCC, it will attempt to use ld.bfd by default.
+    # Try to pick a faster linker.
+    find_program(LLD lld)
+    find_program(MOLD mold)
+
+    if (MOLD AND CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL "12.1")
+        message(NOTICE "Selecting mold as linker")
+        add_link_options("-fuse-ld=mold")
+    elseif (LLD)
+        message(NOTICE "Selecting lld as linker")
+        add_link_options("-fuse-ld=lld")
+    endif()
+endif()
+
 enable_testing()
 add_subdirectory(externals)
 
diff --color -rupN citra/externals/CMakeLists.txt citra/externals/CMakeLists.txt
--- citra/externals/CMakeLists.txt	2023-01-20 00:44:13.712264461 +0800
+++ citra/externals/CMakeLists.txt	2023-01-20 04:34:47.512808459 +0800
@@ -37,16 +37,22 @@ if (NOT USE_SYSTEM_BOOST)
 endif()
 
 # Catch2
-set(CATCH_INSTALL_DOCS OFF CACHE BOOL "")
-set(CATCH_INSTALL_EXTRAS OFF CACHE BOOL "")
-add_subdirectory(catch2)
+if (ENABLE_TESTS AND NOT TARGET Catch2::Catch2)
+    message(STATUS "Using bundled catch2")
+    set(CATCH_INSTALL_DOCS OFF CACHE BOOL "")
+    set(CATCH_INSTALL_EXTRAS OFF CACHE BOOL "")
+    set(CATCH_BUILD_STATIC_LIBRARY ON)
+    add_subdirectory(catch2 EXCLUDE_FROM_ALL)
+endif()
 
 # Crypto++
-set(CRYPTOPP_BUILD_DOCUMENTATION OFF CACHE BOOL "")
-set(CRYPTOPP_BUILD_TESTING OFF CACHE BOOL "")
-set(CRYPTOPP_INSTALL OFF CACHE BOOL "")
-set(CRYPTOPP_SOURCES "${CMAKE_SOURCE_DIR}/externals/cryptopp" CACHE STRING "")
-add_subdirectory(cryptopp-cmake)
+if (NOT TARGET PkgConfig::Crypto++)
+    set(CRYPTOPP_BUILD_DOCUMENTATION OFF CACHE BOOL "")
+    set(CRYPTOPP_BUILD_TESTING OFF CACHE BOOL "")
+    set(CRYPTOPP_INSTALL OFF CACHE BOOL "")
+    set(CRYPTOPP_SOURCES "${CMAKE_SOURCE_DIR}/externals/cryptopp" CACHE STRING "")
+    add_subdirectory(cryptopp-cmake)
+endif()
 
 # HACK: The logic to set up the base include directory for CryptoPP does not work with Android SDK CMake 3.22.1.
 # Until there is a fixed version available, this code will detect and add in the proper include if it does not exist.
@@ -68,19 +74,21 @@ target_include_directories(dds-ktx INTER
 
 # fmt and Xbyak need to be added before dynarmic
 # libfmt
-option(FMT_INSTALL "" ON)
-add_subdirectory(fmt EXCLUDE_FROM_ALL)
+if (NOT TARGET fmt::fmt)
+    add_subdirectory(fmt EXCLUDE_FROM_ALL)
+endif()
 
 # Xbyak
-if ("x86_64" IN_LIST ARCHITECTURE)
+if ("x86_64" IN_LIST ARCHITECTURE AND NOT TARGET xbyak::xbyak)
     add_subdirectory(xbyak EXCLUDE_FROM_ALL)
 endif()
 
 # Dynarmic
-if ("x86_64" IN_LIST ARCHITECTURE OR "arm64" IN_LIST ARCHITECTURE)
+if (("x86_64" IN_LIST ARCHITECTURE OR "arm64" IN_LIST ARCHITECTURE) AND NOT TARGET dynarmic::dynarmic)
     set(DYNARMIC_TESTS OFF CACHE BOOL "")
     set(DYNARMIC_FRONTENDS "A32" CACHE STRING "")
     add_subdirectory(dynarmic EXCLUDE_FROM_ALL)
+    add_library(dynarmic::dynarmic ALIAS dynarmic)
 endif()
 
 # getopt
@@ -92,16 +100,21 @@ endif()
 add_subdirectory(glad)
 
 # glslang
-set(SKIP_GLSLANG_INSTALL ON CACHE BOOL "")
-set(ENABLE_GLSLANG_BINARIES OFF CACHE BOOL "")
-set(ENABLE_SPVREMAPPER OFF CACHE BOOL "")
-set(ENABLE_CTEST OFF CACHE BOOL "")
-set(ENABLE_HLSL OFF CACHE BOOL "")
-set(BUILD_EXTERNAL OFF CACHE BOOL "")
-add_subdirectory(glslang)
+if (NOT TARGET glslang::glslang)
+    message(STATUS "Using bundled glslang")
+    set(SKIP_GLSLANG_INSTALL ON CACHE BOOL "")
+    set(ENABLE_GLSLANG_BINARIES OFF CACHE BOOL "")
+    set(ENABLE_SPVREMAPPER OFF CACHE BOOL "")
+    set(ENABLE_CTEST OFF CACHE BOOL "")
+    set(ENABLE_HLSL OFF CACHE BOOL "")
+    add_subdirectory(glslang)
+endif()
 
 # inih
-add_subdirectory(inih)
+if (NOT TARGET inih::INIReader)
+    message(STATUS "Using bundled inih")
+    add_subdirectory(inih)
+endif()
 
 # MicroProfile
 add_library(microprofile INTERFACE)
@@ -146,33 +159,46 @@ if (ENABLE_LIBUSB AND NOT USE_SYSTEM_LIB
 endif()
 
 # Zstandard
-set(ZSTD_LEGACY_SUPPORT OFF)
-set(ZSTD_BUILD_PROGRAMS OFF)
-set(ZSTD_BUILD_SHARED OFF)
-add_subdirectory(zstd/build/cmake EXCLUDE_FROM_ALL)
-target_include_directories(libzstd_static INTERFACE $<BUILD_INTERFACE:${CMAKE_SOURCE_DIR}/externals/zstd/lib>)
+if (NOT TARGET zstd::zstd)
+    message(STATUS "Using bundled zstd")
+    set(ZSTD_LEGACY_SUPPORT OFF)
+    set(ZSTD_BUILD_PROGRAMS OFF)
+    set(ZSTD_BUILD_SHARED OFF)
+    add_subdirectory(zstd/build/cmake EXCLUDE_FROM_ALL)
+    target_include_directories(libzstd_static INTERFACE $<BUILD_INTERFACE:${CMAKE_SOURCE_DIR}/externals/zstd/lib>)
+    add_library(zstd::zstd ALIAS libzstd_static)
+endif()
 
 # ENet
-add_subdirectory(enet)
-target_include_directories(enet INTERFACE ./enet/include)
+if (NOT TARGET enet::enet)
+    message(STATUS "Using bundled enet")
+    add_subdirectory(enet EXCLUDE_FROM_ALL)
+    target_include_directories(enet INTERFACE ./enet/include)
+    add_library(enet::enet ALIAS enet)
+endif()
 
 # Cubeb
-if (ENABLE_CUBEB)
+if (ENABLE_CUBEB AND NOT TARGET cubeb::cubeb)
     set(BUILD_TESTS OFF CACHE BOOL "")
     set(BUILD_TOOLS OFF CACHE BOOL "")
     set(BUNDLE_SPEEX ON CACHE BOOL "")
     add_subdirectory(cubeb EXCLUDE_FROM_ALL)
+    add_library(cubeb::cubeb ALIAS cubeb)
 endif()
 
 # DiscordRPC
-if (USE_DISCORD_PRESENCE)
+if (USE_DISCORD_PRESENCE AND NOT TARGET DiscordRPC::discord-rpc)
     add_subdirectory(discord-rpc EXCLUDE_FROM_ALL)
     target_include_directories(discord-rpc INTERFACE ./discord-rpc/include)
 endif()
 
 # JSON
-add_library(json-headers INTERFACE)
-target_include_directories(json-headers INTERFACE ./json)
+if (ENABLE_WEB_SERVICE AND NOT TARGET nlohmann_json::nlohmann_json)
+    message(STATUS "Using bundled json")
+    add_library(nlohmann_json INTERFACE)
+    target_include_directories(nlohmann_json INTERFACE ./json)
+    add_library(nlohmann_json::nlohmann_json ALIAS nlohmann_json)
+endif()
 
 # OpenSSL
 if (USE_SYSTEM_OPENSSL)
@@ -195,10 +221,14 @@ if (NOT OPENSSL_FOUND)
 endif()
 
 # httplib
-add_library(httplib INTERFACE)
-target_include_directories(httplib INTERFACE ./httplib)
-target_compile_options(httplib INTERFACE -DCPPHTTPLIB_OPENSSL_SUPPORT)
-target_link_libraries(httplib INTERFACE ${OPENSSL_LIBRARIES})
+if (NOT TARGET httplib::httplib)
+    message(STATUS "Using bundled httplib")
+    add_library(httplib INTERFACE)
+    target_include_directories(httplib INTERFACE ./httplib)
+    target_compile_options(httplib INTERFACE -DCPPHTTPLIB_OPENSSL_SUPPORT)
+    target_link_libraries(httplib INTERFACE ${OPENSSL_LIBRARIES})
+    add_library(httplib::httplib ALIAS httplib)
+endif()
 
 if(ANDROID)
     add_subdirectory(android-ifaddrs)
@@ -206,10 +236,12 @@ if(ANDROID)
 endif()
 
 # cpp-jwt
-if (ENABLE_WEB_SERVICE)
+if (ENABLE_WEB_SERVICE AND NOT TARGET cpp-jwt::cpp-jwt)
+    message(STATUS "Using bundled cpp-jwt")
     add_library(cpp-jwt INTERFACE)
     target_include_directories(cpp-jwt INTERFACE ./cpp-jwt/include)
     target_compile_definitions(cpp-jwt INTERFACE CPP_JWT_USE_VENDORED_NLOHMANN_JSON)
+    add_library(cpp-jwt::cpp-jwt ALIAS cpp-jwt)
 endif()
 
 # lodepng
@@ -223,7 +255,8 @@ if(ANDROID)
 endif()
 
 # OpenAL Soft
-if (ENABLE_OPENAL)
+if (ENABLE_OPENAL AND NOT TARGET OpenAL::OpenAL)
+    message(STATUS "Using bundled OpenAL")
     set(ALSOFT_EMBED_HRTF_DATA OFF CACHE BOOL "")
     set(ALSOFT_EXAMPLES OFF CACHE BOOL "")
     set(ALSOFT_INSTALL OFF CACHE BOOL "")
@@ -236,8 +269,10 @@ if (ENABLE_OPENAL)
 endif()
 
 # VMA
-add_library(vma INTERFACE)
-target_include_directories(vma SYSTEM INTERFACE ./vma/include)
+if (NOT TARGET GPUOpen::VulkanMemoryAllocator)
+    add_library(vma INTERFACE)
+    target_include_directories(vma SYSTEM INTERFACE ./vma/include)
+endif()
 
 # vulkan-headers
 add_library(vulkan-headers INTERFACE)
diff --color -rupN citra/externals/find-modules/FindDiscordRPC.cmake citra/externals/find-modules/FindDiscordRPC.cmake
--- citra/externals/find-modules/FindDiscordRPC.cmake	1970-01-01 08:00:00.000000000 +0800
+++ citra/externals/find-modules/FindDiscordRPC.cmake	2023-01-20 00:41:12.715249024 +0800
@@ -0,0 +1,27 @@
+# SPDX-FileCopyrightText: 2022 Alexandre Bouvier <contact@amb.tf>
+#
+# SPDX-License-Identifier: GPL-3.0-or-later
+
+find_path(DiscordRPC_INCLUDE_DIR discord_rpc.h)
+
+find_library(DiscordRPC_LIBRARY discord-rpc)
+
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(DiscordRPC
+    REQUIRED_VARS
+        DiscordRPC_LIBRARY
+        DiscordRPC_INCLUDE_DIR
+)
+
+if (DiscordRPC_FOUND AND NOT TARGET DiscordRPC::discord-rpc)
+    add_library(DiscordRPC::discord-rpc UNKNOWN IMPORTED)
+    set_target_properties(DiscordRPC::discord-rpc PROPERTIES
+        IMPORTED_LOCATION "${DiscordRPC_LIBRARY}"
+        INTERFACE_INCLUDE_DIRECTORIES "${DiscordRPC_INCLUDE_DIR}"
+    )
+endif()
+
+mark_as_advanced(
+    DiscordRPC_INCLUDE_DIR
+    DiscordRPC_LIBRARY
+)
\ No newline at end of file
diff --color -rupN citra/externals/find-modules/Findenet.cmake citra/externals/find-modules/Findenet.cmake
--- citra/externals/find-modules/Findenet.cmake	1970-01-01 08:00:00.000000000 +0800
+++ citra/externals/find-modules/Findenet.cmake	2023-01-20 00:41:12.715249024 +0800
@@ -0,0 +1,17 @@
+# SPDX-FileCopyrightText: 2022 Alexandre Bouvier <contact@amb.tf>
+#
+# SPDX-License-Identifier: GPL-3.0-or-later
+
+find_package(PkgConfig QUIET)
+if (PKG_CONFIG_FOUND)
+    pkg_search_module(ENET QUIET IMPORTED_TARGET GLOBAL libenet)
+    if (ENET_FOUND)
+        add_library(enet::enet ALIAS PkgConfig::ENET)
+    endif()
+endif()
+
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(enet
+    REQUIRED_VARS ENET_LINK_LIBRARIES
+    VERSION_VAR ENET_VERSION
+)
\ No newline at end of file
diff --color -rupN citra/externals/find-modules/Findinih.cmake citra/externals/find-modules/Findinih.cmake
--- citra/externals/find-modules/Findinih.cmake	1970-01-01 08:00:00.000000000 +0800
+++ citra/externals/find-modules/Findinih.cmake	2023-01-20 00:41:12.715249024 +0800
@@ -0,0 +1,17 @@
+# SPDX-FileCopyrightText: 2022 Alexandre Bouvier <contact@amb.tf>
+#
+# SPDX-License-Identifier: GPL-3.0-or-later
+
+find_package(PkgConfig QUIET)
+if (PKG_CONFIG_FOUND)
+    pkg_search_module(INIREADER QUIET IMPORTED_TARGET GLOBAL INIReader)
+    if (INIREADER_FOUND)
+        add_library(inih::INIReader ALIAS PkgConfig::INIREADER)
+    endif()
+endif()
+
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(inih
+    REQUIRED_VARS INIREADER_LINK_LIBRARIES
+    VERSION_VAR INIREADER_VERSION
+)
\ No newline at end of file
diff --color -rupN citra/externals/find-modules/Findlibusb.cmake citra/externals/find-modules/Findlibusb.cmake
--- citra/externals/find-modules/Findlibusb.cmake	1970-01-01 08:00:00.000000000 +0800
+++ citra/externals/find-modules/Findlibusb.cmake	2023-01-20 00:41:12.715249024 +0800
@@ -0,0 +1,18 @@
+# SPDX-FileCopyrightText: 2022 Alexandre Bouvier <contact@amb.tf>
+#
+# SPDX-License-Identifier: GPL-3.0-or-later
+
+find_package(PkgConfig QUIET)
+if (PKG_CONFIG_FOUND)
+    pkg_search_module(LIBUSB QUIET IMPORTED_TARGET libusb-1.0)
+endif()
+
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(libusb
+    REQUIRED_VARS LIBUSB_LINK_LIBRARIES
+    VERSION_VAR LIBUSB_VERSION
+)
+
+if (libusb_FOUND AND NOT TARGET libusb::usb)
+    add_library(libusb::usb ALIAS PkgConfig::LIBUSB)
+endif()
\ No newline at end of file
diff --color -rupN citra/externals/find-modules/Findzstd.cmake citra/externals/find-modules/Findzstd.cmake
--- citra/externals/find-modules/Findzstd.cmake	1970-01-01 08:00:00.000000000 +0800
+++ citra/externals/find-modules/Findzstd.cmake	2023-01-20 00:41:12.715249024 +0800
@@ -0,0 +1,30 @@
+# SPDX-FileCopyrightText: 2022 yuzu Emulator Project
+# SPDX-License-Identifier: GPL-2.0-or-later
+
+include(FindPackageHandleStandardArgs)
+
+find_package(zstd QUIET CONFIG)
+if (zstd_FOUND)
+    find_package_handle_standard_args(zstd CONFIG_MODE)
+    if (NOT TARGET zstd::zstd)
+        if (TARGET zstd::libzstd_shared)
+            set_target_properties(zstd::libzstd_shared PROPERTIES IMPORTED_GLOBAL TRUE)
+            add_library(zstd::zstd ALIAS zstd::libzstd_shared)
+        else()
+            set_target_properties(zstd::libzstd_static PROPERTIES IMPORTED_GLOBAL TRUE)
+            add_library(zstd::zstd ALIAS zstd::libzstd_static)
+        endif()
+    endif()
+else()
+    find_package(PkgConfig QUIET)
+    if (PKG_CONFIG_FOUND)
+        pkg_search_module(libzstd QUIET IMPORTED_TARGET GLOBAL libzstd)
+        if (libzstd_FOUND)
+            add_library(zstd::zstd ALIAS PkgConfig::libzstd)
+        endif()
+    endif()
+    find_package_handle_standard_args(zstd
+        REQUIRED_VARS libzstd_LINK_LIBRARIES
+        VERSION_VAR libzstd_VERSION
+    )
+endif()
\ No newline at end of file
diff --color -rupN citra/externals/inih/CMakeLists.txt citra/externals/inih/CMakeLists.txt
--- citra/externals/inih/CMakeLists.txt	2023-01-20 00:44:13.722264481 +0800
+++ citra/externals/inih/CMakeLists.txt	2023-01-20 00:41:12.705249011 +0800
@@ -6,4 +6,5 @@ add_library(inih
 )
 
 create_target_directory_groups(inih)
-target_include_directories(inih INTERFACE .)
+target_include_directories(inih INTERFACE inih/cpp)
+add_library(inih::INIReader ALIAS inih)
diff --color -rupN citra/externals/libusb/CMakeLists.txt citra/externals/libusb/CMakeLists.txt
--- citra/externals/libusb/CMakeLists.txt	2023-01-20 00:44:13.725597822 +0800
+++ citra/externals/libusb/CMakeLists.txt	2023-01-20 00:41:12.708582349 +0800
@@ -150,3 +150,4 @@ check_include_files(sys/timerfd.h USBI_T
 
 
 configure_file(config.h.in config.h)
+add_library(libusb::usb ALIAS usb)
\ No newline at end of file
diff --color -rupN citra/src/audio_core/CMakeLists.txt citra/src/audio_core/CMakeLists.txt
--- citra/src/audio_core/CMakeLists.txt	2023-01-20 00:44:13.802264646 +0800
+++ citra/src/audio_core/CMakeLists.txt	2023-01-20 00:41:12.745249061 +0800
@@ -95,12 +100,12 @@ if(ENABLE_SDL2)
 endif()

 if(ENABLE_CUBEB)
-    target_link_libraries(audio_core PRIVATE cubeb)
+    target_link_libraries(audio_core PRIVATE cubeb::cubeb)
     target_compile_definitions(audio_core PUBLIC HAVE_CUBEB)
 endif()

 if(ENABLE_OPENAL)
-    target_link_libraries(audio_core PRIVATE OpenAL)
+    target_link_libraries(audio_core PRIVATE OpenAL::OpenAL)
     target_compile_definitions(audio_core PUBLIC HAVE_OPENAL)
     add_definitions(-DAL_LIBTYPE_STATIC)
 endif()
diff --color -rupN citra/src/citra/CMakeLists.txt citra/src/citra/CMakeLists.txt
--- citra/src/citra/CMakeLists.txt	2023-01-20 00:44:13.805597987 +0800
+++ citra/src/citra/CMakeLists.txt	2023-01-20 00:41:12.745249061 +0800
@@ -19,7 +19,7 @@ add_executable(citra
 create_target_directory_groups(citra)
 
 target_link_libraries(citra PRIVATE citra_common citra_core input_common network)
-target_link_libraries(citra PRIVATE inih glad)
+target_link_libraries(citra PRIVATE inih::INIReader glad)
 if (MSVC)
     target_link_libraries(citra PRIVATE getopt)
 endif()
diff --color -rupN citra/src/citra/config.cpp citra/src/citra/config.cpp
--- citra/src/citra/config.cpp	2023-01-20 00:44:13.805597987 +0800
+++ citra/src/citra/config.cpp	2023-01-20 00:41:12.745249061 +0800
@@ -7,7 +7,7 @@
 #include <sstream>
 #include <unordered_map>
 #include <SDL.h>
-#include <inih/cpp/INIReader.h>
+#include <INIReader.h>
 #include "citra/config.h"
 #include "citra/default_ini.h"
 #include "common/file_util.h"
diff --color -rupN citra/src/citra_qt/CMakeLists.txt citra/src/citra_qt/CMakeLists.txt
--- citra/src/citra_qt/CMakeLists.txt	2023-01-20 00:44:13.805597987 +0800
+++ citra/src/citra_qt/CMakeLists.txt	2023-01-20 00:41:12.755249073 +0800
@@ -297,7 +297,7 @@ if (USE_DISCORD_PRESENCE)
         discord_impl.cpp
         discord_impl.h
     )
-    target_link_libraries(citra-qt PRIVATE discord-rpc)
+    target_link_libraries(citra-qt PRIVATE DiscordRPC::discord-rpc)
     target_compile_definitions(citra-qt PRIVATE -DUSE_DISCORD_PRESENCE)
 endif()
 
diff --color -rupN citra/src/common/CMakeLists.txt citra/src/common/CMakeLists.txt
--- citra/src/common/CMakeLists.txt	2023-01-20 00:44:13.822264687 +0800
+++ citra/src/common/CMakeLists.txt	2023-01-20 00:42:58.732110108 +0800
@@ -166,10 +166,10 @@ endif()
 create_target_directory_groups(citra_common)
 
 target_link_libraries(citra_common PUBLIC fmt::fmt library-headers microprofile Boost::boost Boost::serialization Boost::iostreams)
-target_link_libraries(citra_common PRIVATE libzstd_static)
+target_link_libraries(citra_common PRIVATE zstd::zstd)
 
 if ("x86_64" IN_LIST ARCHITECTURE)
-    target_link_libraries(citra_common PRIVATE xbyak)
+    target_link_libraries(citra_common PRIVATE xbyak::xbyak)
 endif()
 
 if (CITRA_USE_PRECOMPILED_HEADERS)
diff --color -rupN citra/src/core/CMakeLists.txt citra/src/core/CMakeLists.txt
--- citra/src/core/CMakeLists.txt	2023-01-20 00:44:13.828931368 +0800
+++ citra/src/core/CMakeLists.txt	2023-01-20 00:41:12.788582447 +0800
@@ -477,7 +477,7 @@ create_target_directory_groups(citra_cor
 
 target_link_libraries(citra_core PUBLIC citra_common PRIVATE audio_core network video_core)
 target_link_libraries(citra_core PRIVATE Boost::boost Boost::serialization Boost::iostreams httplib)
-target_link_libraries(citra_core PUBLIC dds-ktx PRIVATE cryptopp fmt::fmt lodepng open_source_archives)
+target_link_libraries(citra_core PUBLIC dds-ktx PRIVATE PkgConfig::Crypto++ fmt::fmt lodepng open_source_archives)
 
 if (ENABLE_WEB_SERVICE)
     target_link_libraries(citra_core PRIVATE web_service)
@@ -508,7 +508,7 @@ if ("x86_64" IN_LIST ARCHITECTURE OR "ar
         arm/dynarmic/arm_tick_counts.cpp
         arm/dynarmic/arm_tick_counts.h
     )
-    target_link_libraries(citra_core PRIVATE dynarmic)
+    target_link_libraries(citra_core PRIVATE dynarmic::dynarmic)
 endif()
 
 if (CITRA_USE_PRECOMPILED_HEADERS)
diff --color -rupN citra/src/input_common/CMakeLists.txt citra/src/input_common/CMakeLists.txt
--- citra/src/input_common/CMakeLists.txt	2023-01-20 00:44:13.872264790 +0800
+++ citra/src/input_common/CMakeLists.txt	2023-01-20 00:41:12.788582447 +0800
@@ -36,8 +36,7 @@ if(ENABLE_LIBUSB)
         gcadapter/gc_poller.cpp
         gcadapter/gc_poller.h
     )
-    target_include_directories(input_common PRIVATE ${LIBUSB_INCLUDE_DIR})
-    target_link_libraries(input_common PRIVATE ${LIBUSB_LIBRARIES})
+    target_link_libraries(input_common PRIVATE libusb::usb)
     add_definitions(-DENABLE_GCADAPTER)
 endif()
 
diff --color -rupN citra/src/network/CMakeLists.txt citra/src/network/CMakeLists.txt
--- citra/src/network/CMakeLists.txt	2023-01-20 00:44:13.872264790 +0800
+++ citra/src/network/CMakeLists.txt	2023-01-20 00:41:12.791915785 +0800
@@ -22,7 +22,7 @@ if (ENABLE_WEB_SERVICE)
     target_link_libraries(network PRIVATE web_service)
 endif()
 
-target_link_libraries(network PRIVATE citra_common enet Boost::serialization httplib)
+target_link_libraries(network PRIVATE citra_common enet::enet Boost::serialization httplib)
 
 if (CITRA_USE_PRECOMPILED_HEADERS)
     target_precompile_headers(network PRIVATE precompiled_headers.h)
diff --color -rupN citra/src/tests/audio_core/decoder_tests.cpp citra/src/tests/audio_core/decoder_tests.cpp
--- citra/src/tests/audio_core/decoder_tests.cpp	2023-01-20 00:44:13.875598130 +0800
+++ citra/src/tests/audio_core/decoder_tests.cpp	2023-01-20 00:41:12.791915785 +0800
@@ -3,7 +3,7 @@
 // Refer to the license.txt file included.
 #if defined(HAVE_MF) || defined(HAVE_FFMPEG)
 
-#include <catch2/catch_test_macros.hpp>
+#include <catch2/catch.hpp>
 #include "core/core.h"
 #include "core/core_timing.h"
 #include "core/hle/kernel/memory.h"
diff --color -rupN citra/src/tests/common/bit_field.cpp citra/src/tests/common/bit_field.cpp
--- citra/src/tests/common/bit_field.cpp	2023-01-20 00:44:13.875598130 +0800
+++ citra/src/tests/common/bit_field.cpp	2023-01-20 00:41:12.791915785 +0800
@@ -5,7 +5,7 @@
 #include <array>
 #include <cstring>
 #include <type_traits>
-#include <catch2/catch_test_macros.hpp>
+#include <catch2/catch.hpp>
 #include "common/bit_field.h"
 
 TEST_CASE("BitField", "[common]") {
diff --color -rupN citra/src/tests/common/param_package.cpp citra/src/tests/common/param_package.cpp
--- citra/src/tests/common/param_package.cpp	2023-01-20 00:44:13.875598130 +0800
+++ citra/src/tests/common/param_package.cpp	2023-01-20 00:41:12.791915785 +0800
@@ -3,7 +3,7 @@
 // Refer to the license.txt file included.
 
 #include <cmath>
-#include <catch2/catch_test_macros.hpp>
+#include <catch2/catch.hpp>
 #include "common/logging/backend.h"
 #include "common/param_package.h"

diff --color -rupN citra/src/tests/core/arm/dyncom/arm_dyncom_vfp_tests.cpp citra/src/tests/core/arm/dyncom/arm_dyncom_vfp_tests.cpp
--- citra/src/tests/core/arm/dyncom/arm_dyncom_vfp_tests.cpp	2023-01-20 00:44:13.875598130 +0800
+++ citra/src/tests/core/arm/dyncom/arm_dyncom_vfp_tests.cpp	2023-01-20 00:41:12.791915785 +0800
@@ -2,7 +2,7 @@
 // Licensed under GPLv2 or any later version
 // Refer to the license.txt file included.
 
-#include <catch2/catch_test_macros.hpp>
+#include <catch2/catch.hpp>
 #include "core/arm/dyncom/arm_dyncom.h"
 #include "core/core.h"
 #include "core/core_timing.h"
diff --color -rupN citra/src/tests/core/core_timing.cpp citra/src/tests/core/core_timing.cpp
--- citra/src/tests/core/core_timing.cpp	2023-01-20 00:44:13.878931471 +0800
+++ citra/src/tests/core/core_timing.cpp	2023-01-20 00:41:12.791915785 +0800
@@ -2,7 +2,7 @@
 // Licensed under GPLv2+
 // Refer to the license.txt file included.
 
-#include <catch2/catch_test_macros.hpp>
+#include <catch2/catch.hpp>
 
 #include <array>
 #include <bitset>
diff --color -rupN citra/src/tests/core/file_sys/path_parser.cpp citra/src/tests/core/file_sys/path_parser.cpp
--- citra/src/tests/core/file_sys/path_parser.cpp	2023-01-20 00:44:13.878931471 +0800
+++ citra/src/tests/core/file_sys/path_parser.cpp	2023-01-20 00:41:12.791915785 +0800
@@ -2,7 +2,7 @@
 // Licensed under GPLv2 or any later version
 // Refer to the license.txt file included.
 
-#include <catch2/catch_test_macros.hpp>
+#include <catch2/catch.hpp>
 #include "common/file_util.h"
 #include "core/file_sys/path_parser.h"
 
diff --color -rupN citra/src/tests/core/hle/kernel/hle_ipc.cpp citra/src/tests/core/hle/kernel/hle_ipc.cpp
--- citra/src/tests/core/hle/kernel/hle_ipc.cpp	2023-01-20 00:44:13.878931471 +0800
+++ citra/src/tests/core/hle/kernel/hle_ipc.cpp	2023-01-20 00:41:12.791915785 +0800
@@ -2,7 +2,7 @@
 // Licensed under GPLv2 or any later version
 // Refer to the license.txt file included.
 
-#include <catch2/catch_test_macros.hpp>
+#include <catch2/catch.hpp>
 #include "core/core.h"
 #include "core/core_timing.h"
 #include "core/hle/ipc.h"
diff --color -rupN citra/src/tests/core/memory/memory.cpp citra/src/tests/core/memory/memory.cpp
--- citra/src/tests/core/memory/memory.cpp	2023-01-20 00:44:13.878931471 +0800
+++ citra/src/tests/core/memory/memory.cpp	2023-01-20 00:41:12.791915785 +0800
@@ -2,7 +2,7 @@
 // Licensed under GPLv2 or any later version
 // Refer to the license.txt file included.
 
-#include <catch2/catch_test_macros.hpp>
+#include <catch2/catch.hpp>
 #include "core/core.h"
 #include "core/core_timing.h"
 #include "core/hle/kernel/process.h"
diff --color -rupN citra/src/tests/core/memory/vm_manager.cpp citra/src/tests/core/memory/vm_manager.cpp
--- citra/src/tests/core/memory/vm_manager.cpp	2023-01-20 00:44:13.878931471 +0800
+++ citra/src/tests/core/memory/vm_manager.cpp	2023-01-20 00:41:12.791915785 +0800
@@ -3,7 +3,7 @@
 // Refer to the license.txt file included.
 
 #include <vector>
-#include <catch2/catch_test_macros.hpp>
+#include <catch2/catch.hpp>
 #include "core/core.h"
 #include "core/core_timing.h"
 #include "core/hle/kernel/errors.h"
diff --color -rupN citra/src/tests/video_core/shader/shader_jit_x64_compiler.cpp citra/src/tests/video_core/shader/shader_jit_x64_compiler.cpp
--- citra/src/tests/video_core/shader/shader_jit_x64_compiler.cpp	2023-01-20 00:44:13.878931471 +0800
+++ citra/src/tests/video_core/shader/shader_jit_x64_compiler.cpp	2023-01-20 00:41:12.791915785 +0800
@@ -9,8 +9,7 @@
 #include <cmath>
 #include <memory>
 #include <span>
-#include <catch2/catch_approx.hpp>
-#include <catch2/catch_test_macros.hpp>
+#include <catch2/catch.hpp>
 #include <nihstro/inline_assembly.h>
 #include "video_core/shader/shader_interpreter.h"
 #include "video_core/shader/shader_jit_x64_compiler.h"
@@ -195,9 +194,9 @@ TEST_CASE("LG2", "[video_core][shader][s
     REQUIRE(std::isnan(shader.Run(NAN).x));
     REQUIRE(std::isnan(shader.Run(-1.f).x));
     REQUIRE(std::isinf(shader.Run(0.f).x));
-    REQUIRE(shader.Run(4.f).x == Catch::Approx(2.f));
-    REQUIRE(shader.Run(64.f).x == Catch::Approx(6.f));
-    REQUIRE(shader.Run(1.e24f).x == Catch::Approx(79.7262742773f));
+    REQUIRE(shader.Run(4.f).x == Approx(2.f));
+    REQUIRE(shader.Run(64.f).x == Approx(6.f));
+    REQUIRE(shader.Run(1.e24f).x == Approx(79.7262742773f));
 }
 
 TEST_CASE("EX2", "[video_core][shader][shader_jit]") {
@@ -210,11 +209,11 @@ TEST_CASE("EX2", "[video_core][shader][s
     });
 
     REQUIRE(std::isnan(shader.Run(NAN).x));
-    REQUIRE(shader.Run(-800.f).x == Catch::Approx(0.f));
-    REQUIRE(shader.Run(0.f).x == Catch::Approx(1.f));
-    REQUIRE(shader.Run(2.f).x == Catch::Approx(4.f));
-    REQUIRE(shader.Run(6.f).x == Catch::Approx(64.f));
-    REQUIRE(shader.Run(79.7262742773f).x == Catch::Approx(1.e24f));
+    REQUIRE(shader.Run(-800.f).x == Approx(0.f));
+    REQUIRE(shader.Run(0.f).x == Approx(1.f));
+    REQUIRE(shader.Run(2.f).x == Approx(4.f));
+    REQUIRE(shader.Run(6.f).x == Approx(64.f));
+    REQUIRE(shader.Run(79.7262742773f).x == Approx(1.e24f));
     REQUIRE(std::isinf(shader.Run(800.f).x));
 }
 
@@ -437,7 +436,7 @@ TEST_CASE("Nested Loop", "[video_core][s
         shader_test.RunJit(shader_unit_jit, input);
 
         REQUIRE(shader_unit_jit.address_registers[2] == expected_aL);
-        REQUIRE(shader_unit_jit.registers.output[0].x.ToFloat32() == Catch::Approx(expected_out));
+        REQUIRE(shader_unit_jit.registers.output[0].x.ToFloat32() == Approx(expected_out));
     }
     {
         shader_test.shader_setup->uniforms.i[0] = {9, 0, 2, 0};
@@ -454,7 +453,7 @@ TEST_CASE("Nested Loop", "[video_core][s
         shader_test.RunJit(shader_unit_jit, input);
 
         REQUIRE(shader_unit_jit.address_registers[2] == expected_aL);
-        REQUIRE(shader_unit_jit.registers.output[0].x.ToFloat32() == Catch::Approx(expected_out));
+        REQUIRE(shader_unit_jit.registers.output[0].x.ToFloat32() == Approx(expected_out));
     }
 }

diff --color -rupN citra/src/video_core/renderer_vulkan/vk_shader_util.cpp citra/src/video_core/renderer_vulkan/vk_shader_util.cpp
--- citra/src/video_core/renderer_vulkan/vk_shader_util.cpp	2023-01-20 00:44:13.878931471 +0800
+++ citra/src/video_core/renderer_vulkan/vk_shader_util.cpp	2023-01-20 00:41:12.791915785 +0800
@@ -2,7 +2,7 @@
 // Licensed under GPLv2 or any later version
 // Refer to the license.txt file included.

-#include <SPIRV/GlslangToSpv.h>
+#include <glslang/SPIRV/GlslangToSpv.h>
 #include <glslang/Include/ResourceLimits.h>
 #include <glslang/Public/ShaderLang.h>
 #include "common/assert.h"
diff --color -rupN citra/src/video_core/CMakeLists.txt citra/src/video_core/CMakeLists.txt
--- citra/src/video_core/CMakeLists.txt	2023-01-20 00:44:13.878931471 +0800
+++ citra/src/video_core/CMakeLists.txt	2023-01-20 00:43:41.148864090 +0800
@@ -170,11 +170,11 @@ target_include_directories(video_core PR
 create_target_directory_groups(video_core)
 
 target_link_libraries(video_core PUBLIC citra_common citra_core)
-target_link_libraries(video_core PRIVATE Boost::serialization dds-ktx json-headers nihstro-headers tsl::robin_map)
-target_link_libraries(video_core PRIVATE vulkan-headers vma glad sirit SPIRV glslang)
+target_link_libraries(video_core PRIVATE Boost::serialization dds-ktx nlohmann_json::nlohmann_json nihstro-headers tsl::robin_map)
+target_link_libraries(video_core PRIVATE vulkan-headers GPUOpen::VulkanMemoryAllocator glad sirit SPIRV glslang::glslang)
 
 if ("x86_64" IN_LIST ARCHITECTURE)
-    target_link_libraries(video_core PUBLIC xbyak)
+    target_link_libraries(video_core PUBLIC xbyak::xbyak)
 endif()
 
 if (CITRA_USE_PRECOMPILED_HEADERS)
diff --color -rupN citra/src/video_core/CMakeLists.txt citra/src/video_core/custom_textures/custom_tex_manager.cpp
--- citra/src/video_core/custom_textures/custom_tex_manager.cpp	2023-01-20 00:44:13.878931471 +0800
+++ citra/src/video_core/custom_textures/custom_tex_manager.cpp	2023-01-20 00:43:41.148864090 +0800
@@ -2,7 +2,7 @@
 // Licensed under GPLv2 or any later version
 // Refer to the license.txt file included.

-#include <json.hpp>
+#include <nlohmann/json.hpp>
 #include "common/file_util.h"
 #include "common/memory_detect.h"
 #include "common/microprofile.h"
diff --color -rupN citra/src/web_service/announce_room_json.cpp citra/src/web_service/announce_room_json.cpp
--- citra/src/web_service/announce_room_json.cpp	2023-01-20 00:44:13.892264831 +0800
+++ citra/src/web_service/announce_room_json.cpp	2023-01-20 00:41:12.801915797 +0800
@@ -3,7 +3,7 @@
 // Refer to the license.txt file included.
 
 #include <future>
-#include <json.hpp>
+#include <nlohmann/json.hpp>
 #include "common/detached_tasks.h"
 #include "common/logging/log.h"
 #include "web_service/announce_room_json.h"
diff --color -rupN citra/src/web_service/CMakeLists.txt citra/src/web_service/CMakeLists.txt
--- citra/src/web_service/CMakeLists.txt	2023-01-20 00:44:13.892264831 +0800
+++ citra/src/web_service/CMakeLists.txt	2023-01-20 00:41:12.801915797 +0800
@@ -17,7 +17,7 @@ add_library(web_service STATIC
 create_target_directory_groups(web_service)
 
 target_compile_definitions(web_service PUBLIC -DENABLE_WEB_SERVICE)
-target_link_libraries(web_service PRIVATE citra_common network json-headers httplib cpp-jwt)
+target_link_libraries(web_service PRIVATE citra_common network nlohmann_json::nlohmann_json httplib::httplib cpp-jwt::cpp-jwt)
 target_link_libraries(web_service PUBLIC ${OPENSSL_LIBS})
 set_target_properties(web_service PROPERTIES INTERPROCEDURAL_OPTIMIZATION ${ENABLE_LTO})
 if (ANDROID)
diff --color -rupN citra/src/web_service/telemetry_json.cpp citra/src/web_service/telemetry_json.cpp
--- citra/src/web_service/telemetry_json.cpp	2023-01-20 00:44:13.892264831 +0800
+++ citra/src/web_service/telemetry_json.cpp	2023-01-20 00:41:12.801915797 +0800
@@ -2,7 +2,7 @@
 // Licensed under GPLv2 or any later version
 // Refer to the license.txt file included.

-#include <json.hpp>
+#include <nlohmann/json.hpp>
 #include "common/detached_tasks.h"
 #include "common/web_result.h"
 #include "web_service/telemetry_json.h"
